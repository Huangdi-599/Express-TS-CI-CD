pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'lightweight-node-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        CONTAINER_NAME = 'lightweight-node-app'
        EC2_HOST = credentials('EC2_HOST')
        EC2_USER = credentials('EC2_USER')
        REGISTRY_HOST = credentials('REGISTRY_HOST')
        REGISTRY_PORT = '5000'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        
        stage('Test') {
            steps {
                sh 'npm test'
            }
        }
        
        stage('Build and Push to Registry') {
            steps {
                sh """
                    # Build the image
                    docker build -t ${REGISTRY_HOST}:${REGISTRY_PORT}/${DOCKER_IMAGE}:${DOCKER_TAG} .
                    
                    # Push to registry
                    docker push ${REGISTRY_HOST}:${REGISTRY_PORT}/${DOCKER_IMAGE}:${DOCKER_TAG}
                """
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                sshagent(['ec2-ssh-key']) {
                    sh """
                        # Copy docker-compose file to EC2
                        scp -o StrictHostKeyChecking=no docker-compose.yml ${EC2_USER}@${EC2_HOST}:~/app/
                        
                        # SSH into EC2 and deploy
                        ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} '
                            cd ~/app
                            
                            # Create or update docker-compose.yml with registry image
                            cat > docker-compose.yml << EOL
version: '3.8'

services:
  app:
    image: ${REGISTRY_HOST}:${REGISTRY_PORT}/${DOCKER_IMAGE}:${DOCKER_TAG}
    container_name: ${CONTAINER_NAME}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
EOL
                            
                            # Deploy using docker-compose
                            docker-compose down || true
                            docker-compose pull
                            docker-compose up -d
                        '
                    """
                }
            }
        }
    }
    
    post {
        always {
            sh 'docker logout ${REGISTRY_HOST}:${REGISTRY_PORT}'
            cleanWs()
        }
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
} 